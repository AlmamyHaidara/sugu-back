// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id        Int     @id @default(autoincrement())
  nom       String
  prenom    String
  telephone String  @unique
  email     String  @unique
  password  String
  profile   Profile @default(CLIENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Boutique Boutique[]
  Adresse  Adresse[]

  Panier Panier[]

  Commande Commande[]
}

model Adresse {
  id           Int         @id @default(autoincrement())
  nom          String
  quartier     String
  telephone    String
  descrition   String
  userId       Int
  utilisateurs Utilisateur @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Produit {
  id          Int    @id @default(autoincrement())
  nom         String
  categorie   String
  description String
  img         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Prix Prix[]

  Panier Panier[]
}

model Boutique {
  id           Int         @id @default(autoincrement())
  nom          String
  categorie    String
  img          String?
  description  String
  userId       Int
  utilisateurs Utilisateur @relation(fields: [userId], references: [id])

  Prix Prix[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Panier Panier[]
}

model Prix {
  id        Int    @id @default(autoincrement())
  prix      String
  quantiter Int

  produitId  Int
  boutiqueId Int

  produits  Produit  @relation(fields: [produitId], references: [id])
  boutiques Boutique @relation(fields: [boutiqueId], references: [id])

  LigneCommand LigneCommand[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Panier {
  id    Int @id @default(autoincrement())
  count Int

  utilisateurId Int
  produitId     Int
  boutiqueId    Int

  utilisateurs Utilisateur @relation(fields: [utilisateurId], references: [id])
  boutiques    Boutique    @relation(fields: [boutiqueId], references: [id])
  produits     Produit     @relation(fields: [produitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commande {
  id          Int    @id @default(autoincrement())
  commandeNbr String

  utilisateurId Int

  utilisateurs Utilisateur @relation(fields: [utilisateurId], references: [id])

  LigneCommand LigneCommand[]

  etat      EtatCommand @default(ATTENTE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model LigneCommand {
  id Int @id @default(autoincrement())

  prixId     Int?
  commandeId Int?
  quantiter  Int

  Prix     Prix?     @relation(fields: [prixId], references: [id])
  Commande Commande? @relation(fields: [commandeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Profile {
  ADMIN
  CLIENT
  BOUTIQUIER
}

enum EtatCommand {
  ANNULER
  VALIDER
  ATTENTE
}
